---
 texk/dvipdfm-x/configure.ac |    2 -
 texk/dvipdfm-x/dvipdfmx.c   |   10 +++---
 texk/dvipdfm-x/mpost.c      |   70 +++++++++++++++++++++-----------------------
 3 files changed, 40 insertions(+), 42 deletions(-)

--- texlive-bin.orig/texk/dvipdfm-x/configure.ac
+++ texlive-bin/texk/dvipdfm-x/configure.ac
@@ -7,7 +7,7 @@ dnl   This file is free software; the co
 dnl   gives unlimited permission to copy and/or distribute it,
 dnl   with or without modifications, as long as this notice is preserved.
 dnl
-AC_INIT([dvipdfm-x (TeX Live)], [20180906], [tex-k@tug.org])
+AC_INIT([dvipdfm-x (TeX Live)], [20180906.1], [tex-k@tug.org])
 AC_PREREQ([2.65])
 AC_CONFIG_SRCDIR([agl.c])
 AC_CONFIG_AUX_DIR([../../build-aux])
--- texlive-bin.orig/texk/dvipdfm-x/dvipdfmx.c
+++ texlive-bin/texk/dvipdfm-x/dvipdfmx.c
@@ -448,6 +448,10 @@ do_early_args (int argc, char *argv[])
     case 'v':
       verbose++;
 
+   case 'M':
+      mp_mode = 1;
+      break;
+
     default: /* ignore everything else */
       break;
     }
@@ -491,7 +495,7 @@ do_args (int argc, char *argv[], const c
 
   while ((c = getopt_long(argc, argv, optstrig, long_options, NULL)) != -1) {
     switch(c) {
-    case 'h': case 130: case 131: case 1000: case 'q': case 'v': /* already done */
+    case 'h': case 130: case 131: case 1000: case 'q': case 'v': case 'M': /* already done */
       break;
 
     case 132: /* --dvipdfm */
@@ -644,10 +648,6 @@ do_args (int argc, char *argv[], const c
       bookmark_open = atoi(optarg);
       break;
 
-    case 'M':
-      mp_mode = 1;
-      break;
-
     case 'C':
     {
       int flags = (unsigned) strtol(optarg, &nextptr, 0);
--- texlive-bin.orig/texk/dvipdfm-x/mpost.c
+++ texlive-bin/texk/dvipdfm-x/mpost.c
@@ -88,9 +88,24 @@ static struct mp_font
 } font_stack[PDF_GSAVE_MAX] = {
   {NULL, -1, -1, -1, 0}
 };
-static int currentfont = -1;
+static int currentfont = 0;
 
 #define CURRENT_FONT() ((currentfont < 0) ? NULL : &font_stack[currentfont])
+#define FONT_DEFINED(f) ((f) && (f)->font_name && ((f)->font_id >= 0))
+
+static void
+clear_mp_font_struct (struct mp_font *font)
+{
+  ASSERT(font);
+
+  if (font->font_name)
+    RELEASE(font->font_name);
+  font->font_name  = NULL;
+  font->font_id    = -1;
+  font->tfm_id     = -1;
+  font->subfont_id = -1;
+  font->pt_size    = 0.0;
+}
 
 /* Compatibility */
 #define MP_CMODE_MPOST    0
@@ -108,17 +123,6 @@ mp_setfont (const char *font_name, doubl
 
   font = CURRENT_FONT();
 
-  if (font) {
-    if (!strcmp(font->font_name, font_name) &&
-        font->pt_size == pt_size)
-      return  0;
-  } else { /* No currentfont */
-/* ***TODO*** Here some problem exists! */
-    font = &font_stack[0];
-    font->font_name = NULL;
-    currentfont = 0;
-  }
-
   mrec = pdf_lookup_fontmap_record(font_name);
   if (mrec && mrec->charmap.sfd_name && mrec->charmap.subfont_id) {
     subfont_id = sfd_load_record(mrec->charmap.sfd_name, mrec->charmap.subfont_id);
@@ -154,23 +158,22 @@ save_font (void)
 {
   struct mp_font *current, *next;
 
-  if (currentfont < 0) {
-    font_stack[0].font_name  = NEW(strlen("Courier") + 1, char);
-    strcpy(font_stack[0].font_name, "Courier");
-    font_stack[0].pt_size    = 1;
-    font_stack[0].tfm_id     = 0;
-    font_stack[0].subfont_id = 0;
-    currentfont = 0;
-  }
-
   current = &font_stack[currentfont++];
   next    = &font_stack[currentfont  ];
-  next->font_name  = NEW(strlen(current->font_name)+1, char);
-  strcpy(next->font_name, current->font_name);
-  next->pt_size    = current->pt_size;
-
-  next->subfont_id = current->subfont_id;
-  next->tfm_id     = current->tfm_id;
+  if (FONT_DEFINED(current)) {
+    next->font_name = NEW(strlen(current->font_name)+1, char);
+    strcpy(next->font_name, current->font_name);
+    next->font_id    = current->font_id;
+    next->pt_size    = current->pt_size;
+    next->subfont_id = current->subfont_id;
+    next->tfm_id     = current->tfm_id;    
+  } else {
+    next->font_name  = NULL;
+    next->font_id    = -1;
+    next->pt_size    = 0.0;
+    next->subfont_id = -1;
+    next->tfm_id     = -1;
+  }
 }
 
 static void
@@ -180,11 +183,7 @@ restore_font (void)
 
   current = CURRENT_FONT();
   if (current) {
-    if (current->font_name)
-      RELEASE(current->font_name);
-    current->font_name = NULL;
-  } else {
-    ERROR("No currentfont...");
+    clear_mp_font_struct(current);
   }
 
   currentfont--;
@@ -194,8 +193,7 @@ static void
 clear_fonts (void)
 {
   while (currentfont >= 0) {
-    if (font_stack[currentfont].font_name)
-      RELEASE(font_stack[currentfont].font_name);
+    clear_mp_font_struct(&font_stack[currentfont]);
     currentfont--;
   }
 }
@@ -741,7 +739,7 @@ do_currentfont (void)
   pdf_obj        *font_dict;
 
   font = CURRENT_FONT();
-  if (!font) {
+  if (!FONT_DEFINED(font)) {
     WARN("Currentfont undefined...");
     return 1;
   } else {
@@ -778,7 +776,7 @@ do_show (void)
   double          text_width;
 
   font = CURRENT_FONT();
-  if (!font) {
+  if (!FONT_DEFINED(font)) {
     WARN("Currentfont not set."); /* Should not be error... */
     return 1;
   }
